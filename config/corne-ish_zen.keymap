/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define MEDIA 1
#define NAV 2
#define BT 3
#define NUM 4
#define SYM 5
#define FUN 6

#define TINY_ALPHA_1 7
#define TINY_ALPHA_2 8
#define TINY_NUM     9
#define TINY_SYM     10
#define TINY_NAV     11
#define TINY_FN      12

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

/ {
    combos {        
        compatible = "zmk,combos"; 
        combo_z {            
            timeout-ms = <50>;            
            key-positions = <2 3>;
            layers = <0>;
            bindings = <&kp Z>;
        };
        layer_reset {
            timeout-ms = <50>;
            key-positions = <37 40>;
            bindings = <&to TINY_ALPHA_1>;
        };        
        combo_esc {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp ESC>;
        };
        combo_ctrl {
            timeout-ms = <50>;
            key-positions = <19 20 21>;
            bindings = <&sk LCTRL>;
        };
        combo_alt {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&sk LALT>;
        };
    };

    behaviors {
        td_a: tap_dance_a {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_A";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp A>, <&kp LS(A)>;
        };
        td_e: tap_dance_e {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_E";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LALT E>, <&kp LS(E)>;
        };
        td_i: tap_dance_i {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_I";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp I>, <&kp LS(I)>;
        };
        td_s: tap_dance_s {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_S";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp S>, <&kp LS(S)>;
        };
        td_t: tap_dance_t {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_T";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LALT T>, <&kp LS(T)>;
        };
        td_n: tap_dance_n {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N>, <&kp LS(N)>;
        };
        td_p: tap_dance_p {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_P";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp P>, <&kp LS(P)>;
        };
        td_colon: tap_dance_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COLON";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };
        td_dot: tap_dance_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp COMMA>;
        };

        td_quote: tap_dance_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LGUI SQT>, <&kp AT>;
        };

        td_delete: tap_dance_delete {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DELETE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BKSP>, <&kp LA(BKSP)>;
        };

        td_to_sym: tap_dance_to_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_TO_SYM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl TINY_SYM>, <&to TINY_SYM>;
        };

        
        lh_hrm: left_hand_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HAND_HOME_ROW_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };
        lh_hrm_light: left_hand_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HAND_HOME_ROW_MOD_LIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };
        rh_hrm: right_hand_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HAND_HOME_ROW_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
        rh_hrm_light: right_hand_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HAND_HOME_ROW_MOD_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
        smod: special_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SPECIAL_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
        };
        hmod: heavy_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HEAVY_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "base";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
            bindings = <
   &kp LPAR         &kp Q  &kp W          &kp F           &kp P                  &kp B     &kp J &kp L                   &kp U           &kp Y          &kp SQT  &kp RPAR
   &hmod LGUI ESC   &kp A  &lh_hrm LALT R &lh_hrm LCTRL S &lh_hrm_light LSHIFT T &kp G     &kp M &rh_hrm_light RSHIFT N  &rh_hrm RCTRL E &rh_hrm LALT I &kp O    &hmod LGUI EQUAL
   &hmod RALT ASTRK &kp AT &kp X          &kp C           &kp D                  &kp V     &kp K &kp H                   &kp COMMA       &kp DOT        &kp FSLH &hmod LA(LC(LGUI)) AMPS
                                   &smod MEDIA UNDERSCORE &smod NAV SPACE &smod BT TAB     &smod SYM RET &smod NUM BSPC &smod FUN COLON
            >;
        };
        media_layer {
            label = "media";
            bindings = <
    &none        &none &none    &none     &none      &none    &none &none      &none        &none        &none       &none
    &mt LGUI ESC &none &kp LALT &kp LCTRL &kp LSHIFT &none    &none &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT  &none
    &none        &none &none    &none     &none      &none    &none &none      &none        &none        &none       &none
                                        &trans &none &none    &kp C_STOP &kp C_PLAY_PAUSE &kp C_MUTE
            >;
        };
        nav_layer {
            label = "nav";
            bindings = <
    &none &none     &none &kp HOME  &kp END   &none         &none &none    &kp UP   &none     &none      &none
    &none &none     &none &kp PG_UP &kp PG_DN &none         &none &kp LEFT &kp DOWN &kp RIGHT &td_delete &none
    &none &none     &none &none     &none     &none         &none &none    &none    &none     &kp DEL    &none
                                  &none &none &none         &kp INS &caps_word &none
            >;
        };
        bt_layer {
            label = "bluetooth";
            bindings = <
    &none &none &none        &none        &none        &none          &none    &none  &kp DOLLAR &kp PIPE2  &none     &none
    &none &none &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_CLR     &none    &kp LT &kp MINUS  &kp GT &kp COLON &kp EQUAL
    &none &none &none        &none        &none        &none          &none    &none  &kp ASTRK  &none  &kp LS(QUESTION)     &reset
                        &trans &none &none        &none &to TINY_ALPHA_1 &none
            >;
        };
        num_layer {
            label = "number";
            bindings = <
    &none        &kp LBKT &kp N4 &kp N5 &kp N6 &kp RBKT    &none &none      &none     &none    &none &none
    &mt LGUI ESC &kp SEMI &kp N1 &kp N2 &kp N3 &kp EQUAL   &none &kp RSHIFT &kp RCTRL &kp LALT &none &mt LGUI EQUAL
    &kp PIPE2    &kp GRAV &kp N7 &kp N8 &kp N9 &kp NON_US_BSLH    &none &none      &none     &none    &none &none
                                &kp DOT &kp N0 &kp MINUS                  &none &trans &none
            >;
        };
        sym_layer {
            label = "symbol";
            bindings = <
    &kp HASH &kp LBRC  &kp AMPS &kp ASTRK &kp LPAR &kp RBRC    &none &none      &none     &none    &none &none
    &mt LGUI ESC    &kp COLON &kp DOLLAR &kp PERCENT &kp CARET &kp PLUS   &none &kp RSHIFT &kp RCTRL &kp LALT &none &kp LGUI
    &none           &kp PIPE &kp EXCL &kp AT &kp NON_US_HASH &kp PIPE2    &none &none      &none     &none    &none &none
                                &kp LPAR &kp RPAR &kp UNDER                  &trans &none &none
            >;
        };
        fun_layer {
            label = "f";
            bindings = <
    &none        &kp F12 &kp F7 &kp F8 &kp F9 &none    &none &none      &none     &none    &none &none
    &mt LGUI ESC &kp F11 &kp F4 &kp F5 &kp F6 &none   &none &kp RSHIFT &kp RCTRL &kp LALT &none &mt GUI EQUAL
    &none        &kp F10 &kp F1 &kp F2 &kp F3 &none    &none &none      &none     &none    &none &none
                                &kp RGUI &kp SPACE &kp TAB                  &none &trans &none
            >;
        };


        tiny_alpha_1 {
            label = "alpha 1";
            bindings = <
    &to BASE  &none     &kp H &kp F &kp U &none         &none &kp C &kp M &kp R &none   &none
    &td_quote &kp O     &td_i &td_e &td_a &none         &none &td_s &td_t &td_n &td_p   &key_repeat
    &none     &td_colon &none &none &none &none         &none &none &none &none &td_dot &none
         &none &smod TINY_NAV SPACE &td_to_sym         &kp RETURN &sl TINY_ALPHA_2 &none
            >;
        };

        tiny_alpha_2 {
            label = "alpha 2";
            bindings = <
    &to BASE &none     &kp Q &kp J &kp K &none         &none &kp V &kp X &kp Z &none    &none
    &none    &kp LPAR  &kp W &kp Y &kp G &none         &none &kp D &kp L &kp B &kp RPAR &none
    &none    &none     &none &none &none &none         &none &none &none &none &none    &none
         &none &smod TINY_NAV SPACE &td_to_sym         &kp TAB &to TINY_NUM &none
            >;
        };

        tiny_num {
            label = "num";
            bindings = <
    &to BASE &none     &kp N4 &kp N5 &kp N6 &none         &none &kp DOT &kp EQUAL &none  &none     &none
    &none    &kp ASTRK &kp N1 &kp N2 &kp N3 &none         &none &kp N7  &kp N8    &kp N9 &kp PLUS  &none
    &none    &kp FSLH  &none  &none  &none  &none         &none &none   &none     &none  &kp MINUS &none
              &none &smod TINY_NAV SPACE &sk LCTRL        &none &kp N0 &none
            >;
        };

        tiny_sym {
            label = "sym";
            bindings = <
    &to BASE &none    &kp EXCL &kp PERCENT &kp NON_US_HASH &none         &none &kp AMPS &kp DOLLAR &kp GRAV &none    &none
    &none    &kp LPAR &kp PIPE &kp EQUAL   &kp PIPE2       &none         &none &kp LT   &kp ASTRK  &kp GT   &kp RPAR &none
    &none    &none    &none    &none       &none           &none         &none &none &none &none &none    &none
                           &none &to TINY_ALPHA_1 &kp UNDERSCORE         &kp PLUS &kp MINUS &none
            >;
        };

        tiny_nav {
            label = "nav";
            bindings = <
    &to BASE &none     &none &kp HOME  &kp END   &none         &none &none    &kp UP   &none     &none      &none
    &none    &none     &none &kp PG_UP &kp PG_DN &none         &none &kp LEFT &kp DOWN &kp RIGHT &td_delete &none
    &none    &none     &none &none     &none     &none         &none &none    &none    &none     &kp DEL    &none
                                    &none &none &none          &caps_word &none &none
            >;
        };
    };
};
