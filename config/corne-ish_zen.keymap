/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define MEDIA 1
#define NAV 2
#define BT 3
#define NUM 4
#define SYM 5
#define FUN 6

#define TINY_ALPHA_1 7
#define TINY_ALPHA_2 8
#define TINY_NUM     9
#define TINY_SYM     10
#define TINY_NAV     11
#define TINY_FN      12
#define TINY_MEDIA   13

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

/ {
    combos {        
        compatible = "zmk,combos"; 
        combo_z {            
            timeout-ms = <50>;            
            key-positions = <2 3>;
            layers = <0>;
            bindings = <&kp Z>;
        };
        layer_reset {
            timeout-ms = <50>;
            key-positions = <37 40>;
            bindings = <&to TINY_ALPHA_1>;
        };        
        combo_esc {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp ESC>;
        };
        combo_ctrl {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&sk LCTRL>;
        };
        combo_ctrl_shift {
            timeout-ms = <50>;
            key-positions = <13 14 15 16>;
            bindings = <&sk LS(LCTRL)>;
        };
        combo_alt {
            timeout-ms = <50>;
            key-positions = <19 20 21>;
            bindings = <&sk LALT>;
        };
        combo_alt_ctrl {
            timeout-ms = <50>;
            key-positions = <19 20 21 22>;
            bindings = <&sk LC(LALT)>;
        };
        combo_shift { 
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&sk LSHIFT>;
        };
        combo_super_shift { 
            timeout-ms = <50>;
            key-positions = <12 23>;
            bindings = <&sk LS(LGUI)>;
        };
        combo_super_ctrl {
            timeout-ms = <50>;
            key-positions = <12 22>;
            bindings = <&sk LC(LGUI)>;
        };
    };

    behaviors {
        td_a: tap_dance_a {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_A";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp A>, <&kp LS(A)>;
        };
        td_b: tap_dance_b {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_B";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp B>, <&kp LS(B)>;
        };
        td_c: tap_dance_c {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_C";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp C>, <&kp LS(C)>;
        };
        td_d: tap_dance_d {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_D";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp D>, <&kp LS(D)>;
        };
        td_e: tap_dance_e {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_E";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp E>, <&kp LS(E)>;
        };
        td_f: tap_dance_f {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp F>, <&kp LS(F)>;
        };
        td_g: tap_dance_g {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_G";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp G>, <&kp LS(G)>;
        };
        td_h: tap_dance_h {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_H";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp H>, <&kp LS(H)>;
        };
        td_i: tap_dance_i {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_I";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp I>, <&kp LS(I)>;
        };
        td_j: tap_dance_j {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_J";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp J>, <&kp LS(J)>;
        };
        td_k: tap_dance_k {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_K";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp K>, <&kp LS(K)>;
        };
        td_l: tap_dance_l {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_L";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp L>, <&kp LS(L)>;
        };
        td_m: tap_dance_m {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_M";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp M>, <&kp LS(M)>;
        };
        td_n: tap_dance_n {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp N>, <&kp LS(N)>;
        };
        td_o: tap_dance_o {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_O";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp O>, <&kp LS(O)>;
        };
        td_p: tap_dance_p {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_P";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp P>, <&kp LS(P)>;
        };
        td_q: tap_dance_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_Q";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp Q>, <&kp LS(Q)>;
        };
        td_r: tap_dance_r {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_R";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp R>, <&kp LS(R)>;
        };
        td_s: tap_dance_s {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_S";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp S>, <&kp LS(S)>;
        };
        td_t: tap_dance_t {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_T";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp T>, <&kp LS(T)>;
        };
        td_u: tap_dance_u {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_U";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp U>, <&kp LS(U)>;
        };
        td_v: tap_dance_v {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_V";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp V>, <&kp LS(V)>;
        };
        td_w: tap_dance_w {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_W";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp W>, <&kp LS(W)>;
        };
        td_x: tap_dance_x {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_X";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp X>, <&kp LS(X)>;
        };
        td_y: tap_dance_y {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_Y";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp Y>, <&kp LS(Y)>;
        };
        td_z: tap_dance_z {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_Z";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp Z>, <&kp LS(Z)>;
        };

        td_colon: tap_dance_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COLON";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };
        td_dot: tap_dance_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOT";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp DOT>, <&kp COMMA>;
        };
        td_quote: tap_dance_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&mt LGUI SQT>, <&kp AT>;
        };
        td_lpar: tap_dance_lpar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LPAREN";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp LPAR>, <&kp LBRC>;
        };
        td_rpar: tap_dance_rpar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_RPAREN";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp RPAR>, <&kp RBRC>;
        };

        td_del: tap_dance_delete {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DELETE";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp DEL>, <&kp LA(BKSP)>;
        };

        td_to_sym: tap_dance_to_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_TO_SYM";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&smod TINY_SYM TAB>, <&to TINY_SYM>;
        };

        
        lh_hrm: left_hand_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HAND_HOME_ROW_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };
        lh_hrm_light: left_hand_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HAND_HOME_ROW_MOD_LIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };
        rh_hrm: right_hand_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HAND_HOME_ROW_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
        rh_hrm_light: right_hand_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HAND_HOME_ROW_MOD_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
        smod: special_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SPECIAL_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <180>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
        };
        smod_light: special_mods_light {
            compatible = "zmk,behavior-hold-tap";
            label = "SPECIAL_MOD_LIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <180>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
        };
        hmod: heavy_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HEAVY_MOD";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "base";
            bindings = <
   &td_lpar         &kp Q  &kp W          &kp F           &kp P                  &kp B     &kp J &kp L                   &kp U           &kp Y          &kp SQT  &td_rpar
   &hmod LGUI ESC   &kp A  &lh_hrm LALT R &lh_hrm LCTRL S &lh_hrm_light LSHIFT T &kp G     &kp M &rh_hrm_light RSHIFT N  &rh_hrm RCTRL E &rh_hrm LALT I &kp O    &hmod LGUI EQUAL
   &hmod RALT ASTRK &kp AT &kp X          &kp C           &kp D                  &kp V     &kp K &kp H                   &kp COMMA       &kp DOT        &kp FSLH &hmod LA(LC(LGUI)) AMPS
                        &smod MEDIA UNDERSCORE &smod TINY_NAV SPACE &smod TINY_SYM TAB     &smod TINY_NUM RET &smod NUM BSPC &smod FUN COLON
            >;
        };
        media_layer {
            label = "media";
            bindings = <
    &none &none &none        &none        &none      &none       &none &none      &none        &none        &none       &none
    &none &none &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_CLR &none       &none &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT  &none
    &none &none &none        &none        &none      &none       &none &none      &none        &none        &none       &none
                                        &trans &none &none       &kp C_STOP &kp C_PLAY_PAUSE &kp C_MUTE
            >;
        };
        nav_layer {
            label = "nav";
            bindings = <
    &none &none     &none &kp HOME  &kp END   &none         &none &none    &kp UP   &none     &none      &none
    &none &none     &none &kp PG_UP &kp PG_DN &none         &none &kp LEFT &kp DOWN &kp RIGHT &td_del &none
    &none &none     &none &none     &none     &none         &none &none    &none    &none     &kp DEL    &none
                                  &none &none &none         &kp INS &caps_word &none
            >;
        };
        bt_layer {
            label = "bluetooth";
            bindings = <
    &none &none &none        &none        &none        &none          &none    &none  &kp DOLLAR &kp PIPE2  &none     &none
    &none &none &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_CLR     &none    &kp LT &kp MINUS  &kp GT &kp COLON &kp EQUAL
    &none &none &none        &none        &none        &none          &none    &none  &kp ASTRK  &none  &kp LS(QUESTION)     &reset
                        &trans &none &none        &none &to TINY_ALPHA_1 &none
            >;
        };
        num_layer {
            label = "number";
            bindings = <
    &none        &kp LBKT &kp N4 &kp N5 &kp N6 &kp RBKT    &none &none      &none     &none    &none &none
    &mt LGUI ESC &kp SEMI &kp N1 &kp N2 &kp N3 &kp EQUAL   &none &kp RSHIFT &kp RCTRL &kp LALT &none &mt LGUI EQUAL
    &kp PIPE2    &kp GRAV &kp N7 &kp N8 &kp N9 &kp NON_US_BSLH    &none &none      &none     &none    &none &none
                                &kp DOT &kp N0 &kp MINUS                  &none &trans &none
            >;
        };
        sym_layer {
            label = "symbol";
            bindings = <
    &kp HASH &kp LBRC  &kp AMPS &kp ASTRK &kp LPAR &kp RBRC    &none &none      &none     &none    &none &none
    &mt LGUI ESC    &kp COLON &kp DOLLAR &kp PERCENT &kp CARET &kp PLUS   &none &kp RSHIFT &kp RCTRL &kp LALT &none &kp LGUI
    &none           &kp PIPE &kp EXCL &kp AT &kp NON_US_HASH &kp PIPE2    &none &none      &none     &none    &none &none
                                &kp LPAR &kp RPAR &kp UNDER                  &trans &none &none
            >;
        };
        fun_layer {
            label = "f";
            bindings = <
    &none        &kp F12 &kp F7 &kp F8 &kp F9 &none    &none &none      &none     &none    &none &none
    &mt LGUI ESC &kp F11 &kp F4 &kp F5 &kp F6 &none   &none &kp RSHIFT &kp RCTRL &kp LALT &none &mt GUI EQUAL
    &none        &kp F10 &kp F1 &kp F2 &kp F3 &none    &none &none      &none     &none    &none &none
                                &kp RGUI &kp SPACE &kp TAB                  &none &trans &none
            >;
        };


        tiny_alpha_1 {
            label = "alpha 1";
            bindings = <
    &to BASE  &none     &td_l &td_a &td_u &none         &none &td_c &td_m &td_r &none   &none
    &td_quote &td_h     &td_o &td_i &td_e &none         &none &td_t &td_s &td_n &td_p   &key_repeat
    &none     &td_colon &none &none &none &none         &none &none &none &none &td_dot &none
    &mo TINY_MEDIA &smod_light TINY_NAV SPACE &smod_light TINY_SYM TAB         &smod TINY_NUM RETURN &sl TINY_ALPHA_2 &mo TINY_MEDIA
            >;
        };

        tiny_alpha_2 {
            label = "alpha 2";
            bindings = <
    &to BASE &none     &td_q &td_j &td_k &none         &none &td_v &td_x &td_z &none    &none
    &kp GRAV &td_lpar  &td_w &td_y &td_g &none         &none &td_d &td_f &td_b &td_rpar &none
    &none    &kp LBKT  &none &none &none &none         &none &none &none &none &kp RBKT &none
  &none &smod_light TINY_NAV SPACE &sl TINY_FN         &kp TAB &to TINY_NUM &none
            >;
        };

        tiny_num {
            label = "num";
            bindings = <
    &to BASE  &none    &kp N4 &kp N5 &kp N6 &none         &none &kp DOT &kp EQUAL &kp UNDERSCORE  &none     &none
    &kp ASTRK &kp N0   &kp N1 &kp N2 &kp N3 &none         &none &kp N7  &kp N8    &kp N9          &kp MINUS &kp COMMA
    &none     &kp FSLH &none  &none  &none  &none         &none &none   &none     &none           &kp PLUS  &none
       &none &smod_light TINY_NAV SPACE &sk LCTRL         &none &kp N0 &none
            >;
        };

        tiny_sym {
            label = "sym";
            bindings = <
    &to BASE &none           &kp EXCL &kp PERCENT  &kp NON_US_HASH &none         &none &kp AMPS &kp DOLLAR &kp CARET &none          &none
    &kp HASH &kp QUESTION    &kp PIPE &kp EQUAL    &kp PIPE2       &none         &none &kp LT   &kp ASTRK  &kp GT    &kp UNDERSCORE &kp LS(SQT)
    &none    &kp NON_US_BSLH &none    &bt BT_SEL 1 &bt BT_SEL 0    &bt BT_CLR    &none &none    &none      &none     &kp FSLH       &none
                                  &none &to TINY_ALPHA_1 &kp UNDERSCORE         &kp PLUS &kp MINUS &none
            >;
        };

        tiny_nav {
            label = "nav";
            bindings = <
    &to BASE &none         &none       &kp HOME  &kp END   &none         &none &kp F12  &kp UP   &kp LC(F12) &none    &none
    &none    &kp LG(SPACE) &kp LA(TAB) &kp PG_UP &kp PG_DN &none         &none &kp LEFT &kp DOWN &kp RIGHT   &kp BKSP &none
    &none    &none         &none       &none     &none     &none         &none &none    &none    &none       &kp DEL  &none
                                               &none &none &none         &none &caps_word &none
            >;
        };
        
        tiny_fn {
            label = "fn";
            bindings = <
    &none &none &kp F5  &kp F8 &none   &none    &none &none       &none &none &none &none
    &none &none &kp F10 &kp F2 &kp F12 &none    &none &kp LC(F12) &none &none &none &none
    &none &none &none   &none  &none   &none    &none &none       &none &none &none &none
      &none &smod_light TINY_NAV SPACE &none    &none &trans &none
            >;
        };

        tiny_media {
            label = "media";
            bindings = <
    &none &none &none        &none        &none      &none       &none &none      &none        &none        &none       &none
    &none &none &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_CLR &none       &none &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT  &none
    &none &none &none        &none        &none      &none       &none &none      &none        &none        &none       &none
                                        &trans &none &none       &kp C_STOP &kp C_PLAY_PAUSE &kp C_MUTE
            >;
        };
    };
};
